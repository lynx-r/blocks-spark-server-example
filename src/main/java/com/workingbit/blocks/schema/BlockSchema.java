package com.workingbit.blocks.schema;

import graphql.schema.*;

import static graphql.Scalars.GraphQLInt;
import static graphql.Scalars.GraphQLString;
import static graphql.schema.GraphQLArgument.newArgument;
import static graphql.schema.GraphQLFieldDefinition.newFieldDefinition;
import static graphql.schema.GraphQLInputObjectField.newInputObjectField;
import static graphql.schema.GraphQLInputObjectType.newInputObject;
import static graphql.schema.GraphQLObjectType.newObject;

public class BlockSchema {

  private static GraphQLObjectType blockData = newObject()
      .name("blockData")
      .field(newFieldDefinition()
          .type(GraphQLString)
          .name("id")
          .description("Id текстового блока")
          .build())
      .field(newFieldDefinition()
          .type(GraphQLString)
          .name("type")
          .description("Тип блока")
          .build())
      .field(newFieldDefinition()
          .type(GraphQLString)
          .name("data")
          .description("Строка данных")
          .build())
      .field(newFieldDefinition()
          .type(GraphQLInt)
          .name("order")
          .description("Порядковый номер")
          .build())
      .build();

  private static GraphQLInputObjectType blockDataInput = newInputObject()
      .name("blockDataInput")
      .field(newInputObjectField()
          .type(GraphQLString)
          .name("id")
          .description("Id текстового блока")
          .build())
      .field(newInputObjectField()
          .type(GraphQLString)
          .name("type")
          .description("Тип блока")
          .build())
      .field(newInputObjectField()
          .type(GraphQLString)
          .name("data")
          .description("Строка данных")
          .build())
      .field(newInputObjectField()
          .type(GraphQLInt)
          .name("order")
          .description("Порядковый номер")
          .build())
      .build();

  private static GraphQLObjectType queryType = newObject()
      .name("Block")
      .field(newFieldDefinition()
          .type(new GraphQLList(blockData))
          .name("blocks")
          .description("Блоки")
          .dataFetcher(BlocksData.blockFetcher)
          .build())
      .build();

  private static GraphQLObjectType mutationType = newObject()
      .name("Blocks")
      .field(newFieldDefinition()
          .type(blockData)
          .name("add")
          .description("Добавить блок")
          .argument(newArgument()
              .name("type")
              .description("Тип блока")
              .type(new GraphQLNonNull(GraphQLString))
              .build())
          .argument(newArgument()
              .name("data")
              .description("Данные блока")
              .type(new GraphQLNonNull(GraphQLString))
              .build())
          .argument(newArgument()
              .name("order")
              .description("Порядковый номер")
              .type(new GraphQLNonNull(GraphQLInt))
              .build())
          .dataFetcher(BlocksData.addFetcher)
          .build())

//        .field(newFieldDefinition()
//            .type(blockData)
//            .name("toggle")
//            .description("toggle the todo")
//            .argument(newArgument()
//                .name("id")
//                .description("todo id")
//                .type(new GraphQLNonNull(GraphQLString))
//                .build())
//            .dataFetcher(TodoData.toggleFetcher)
//            .build())
//
//        .field(newFieldDefinition()
//            .type(new GraphQLList(blockData))
//            .name("toggleAll")
//            .description("toggle all todos")
//            .argument(newArgument()
//                .name("checked")
//                .description("checked flag")
//                .type(new GraphQLNonNull(GraphQLBoolean))
//                .build())
//            .dataFetcher(TodoData.toggleAllFetcher)
//            .build())

      .field(newFieldDefinition()
          .type(blockData)
          .name("destroy")
          .description("Удалить блок")
          .argument(newArgument()
              .name("id")
              .description("Id блока")
              .type(new GraphQLNonNull(GraphQLString))
              .build())
          .dataFetcher(BlocksData.destroyFetcher)
          .build())

//        .field(newFieldDefinition()
//            .type(new GraphQLList(blockData))
//            .name("clearCompleted")
//            .description("clear all completed todos")
//            .dataFetcher(TodoData.clearCompletedFetcher)
//            .build())

      .field(newFieldDefinition()
          .type(blockData)
          .name("save")
          .description("Сохранить блок")
          .argument(newArgument()
              .name("id")
              .description("Id блока")
              .type(new GraphQLNonNull(GraphQLString))
              .build())
          .argument(newArgument()
              .name("data")
              .description("Данные блока")
              .type(new GraphQLNonNull(GraphQLString))
              .build())
          .argument(newArgument()
              .name("order")
              .description("Порядковый номер")
              .type(new GraphQLNonNull(GraphQLInt))
              .build())
          .dataFetcher(BlocksData.saveFetcher)
          .build())

      .field(newFieldDefinition()
          .type(GraphQLList.list(blockDataInput))
          .name("batchSave")
          .description("Сохранить блоков")
          .argument(newArgument()
              .name("blocks")
              .description("Список для сохранения")
              .type(new GraphQLList(blockDataInput))
              .build())
          .dataFetcher(BlocksData.batchSaveFetcher)
          .build())

      .build();


  public static GraphQLSchema schema = GraphQLSchema.newSchema()
      .query(queryType)
      .mutation(mutationType)
      .build();
}